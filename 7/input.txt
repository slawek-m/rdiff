#include "fstream"
#include "Delta.h"

Delta::Delta(Weaksum &weak, Strongsum &strong,
             const std::string &in_file_name,
             const std::string &in_sig_file_name,
             const std::string &out_delta_file_name,
             size_t block_size) : m_ws(weak), m_ss(strong),
                                  m_in_file_name(in_file_name),
                                  m_in_sig_file_name(in_sig_file_name),
                                  m_out_delta_file_name(out_delta_file_name),
                                  m_block_size(block_size),
                                  m_sig(m_ws, m_ss, m_in_sig_file_name, m_block_size),
                                  m_input_buffer(m_block_size)
{
    m_sig.ReadSignature(m_mmap);
}

void Delta::CreateDelta()
{
    std::ifstream fin(m_in_file_name, std::ifstream::binary);
    std::ofstream fout(m_out_delta_file_name, std::ofstream::binary);

    char buff;
    char front;
    uint32_t weak_sig;
    uint32_t block_num;

    while (!fin.eof())
    {
        fin.read(&buff, 1);
        if (fin.gcount())
        {
            m_dq.push_back(buff);
            auto size = m_dq.size();
            if (size == 1)
            {
                m_ws.Reset();
                m_ws.Update(reinterpret_cast<const unsigned char *>(&buff), size);
            }
            else if ((size > 1) && (size < m_block_size))
            {
                m_ws.Rollin(buff);
            }
            else if (size == m_block_size)
            {
                // printf("match 1\n");
                m_ws.Rollin(buff);
                weak_sig = m_ws.Digest();

                /*for (const auto &a : m_dq)
                {
                    printf(" %x", a);
                }
                printf("\n");*/

                if (Match(weak_sig, block_num))
                {
                    /*printf("%x:", weak_sig);
                    printf(" :");
                    for (const auto &a : m_dq)
                    {
                        printf(" %x", a);
                    }
                    printf("\n\n");*/
                    m_dq.clear();

                    printf("block num =====>: %d\n", block_num);
                    WriteFile(fout, block_num);
                }
            }
            else if (size > m_block_size)
            {
                // printf("match 2\n");
                front = m_dq.front();
                m_dq.pop_front();
                m_ws.Rotate(front, buff);
                weak_sig = m_ws.Digest();

                printf("val =====>: %c, %x\n", front, front);
                WriteData(front);

                if (Match(weak_sig, block_num))
                {
                    /*printf("%x:", weak_sig);
                    printf(" :");
                    for (const auto &a : m_dq)
                    {
                        printf(" %x", a);
                    }
                    printf("\n\n");*/
                    m_dq.clear();
                    printf("block num =====>: %d\n", block_num);
                    WriteFile(fout, block_num);
                }
            }
        }
    }

    /*printf("\ntail\n");
    for (const auto &a : m_dq)
    {
        printf(" %x", a);
    }
    printf("\n");*/
    while (m_dq.size())
    {
        weak_sig = m_ws.Digest();
        if (Match(weak_sig, block_num))
        {
            m_dq.clear();
            printf("block num =====>: %d\n", block_num);
            WriteFile(fout, block_num);
        }
        else
        {
            front = m_dq.front();
            m_dq.pop_front();
            m_ws.Rollout(front);

            printf("val =====>: %c, %x\n", front, front);
            WriteData(front);
        }
    }
    WriteTail(fout);
}

bool Delta::Match(uint32_t weak_sig, uint32_t &block_num)
{
    bool res = false;
    std::vector<unsigned char> strong_sig(m_ss.GetSize());
    std::copy(m_dq.begin(), m_dq.end(), m_input_buffer.begin());

    std::pair<SigMap::iterator, SigMap::iterator> range;
    range = m_mmap.equal_range(weak_sig);

    for (auto it = range.first; it != range.second; ++it)
    {
        m_ss.Digest(strong_sig.data(), m_input_buffer.data(), m_dq.size());
        if (memcmp(strong_sig.data(), it->second.m_v.data(), m_ss.GetSize()) == 0)
        {
            res = true;
            block_num = it->second.m_number;

            /*printf("%x:", weak_sig);
            for (int i = 0; i < 16; ++i)
            {
                printf(" %x", strong_sig[i]);
            }
            printf(" :%d", block_num);
            printf("\n");*/

            break;
        }
    }
    return res;
}

void Delta::WriteData(char data)
{
    m_file_data_buffer.push_back(data);
}

void Delta::WriteFile(std::ofstream &fout, uint32_t block_num)
{
    const size_t out_data_size = m_file_data_buffer.size();
    if (out_data_size)
    {
        fout.write(&m_data_delimiter, 1);

        fout.write(reinterpret_cast<const char *>(&out_data_size), m_data_num_field_size);
        fout.write(m_file_data_buffer.data(), out_data_size);
        m_file_data_buffer.clear();
    }

    fout.write(&m_block_delimiter, 1);
    fout.write(reinterpret_cast<char *>(&block_num), m_block_num_field_size);
}

void Delta::WriteTail(std::ofstream &fout)
{
    const size_t out_data_size = m_file_data_buffer.size();
    if (out_data_size)
    {
        fout.write(&m_data_delimiter, 1);

        fout.write(reinterpret_cast<const char *>(&out_data_size), m_data_num_field_size);
        fout.write(m_file_data_buffer.data(), out_data_size);
        m_file_data_buffer.clear();
    }
}

void Delta::ParseDelta()
{
    std::ifstream fin(m_out_delta_file_name, std::ifstream::binary);
    char delimiter;
    std::vector<char> data_buffer(m_block_size);

    while (!fin.eof())
    {
        fin.read(&delimiter, 1);
        if (fin.gcount())
        {
            if (delimiter == m_block_delimiter)
            {
                fin.read(data_buffer.data(), m_block_num_field_size);
                uint32_t block_number = *reinterpret_cast<uint32_t *>(data_buffer.data());
                printf("block_number: %d\n", block_number);
            }
            else if (delimiter == m_data_delimiter)
            {
                fin.read(data_buffer.data(), m_data_num_field_size);
                uint32_t data_length = *reinterpret_cast<uint32_t *>(data_buffer.data());
                printf("data_length: %d\n", data_length);

                uint32_t buffs_number = data_length / m_block_size;
                uint32_t buff_tail_size = data_length % m_block_size;
                while (buffs_number--)
                {
                    fin.read(data_buffer.data(), m_block_size);
                    for (const auto &a : data_buffer)
                    {
                        printf("val: %c, %x\n", a, a);
                    }
                }
                fin.read(data_buffer.data(), buff_tail_size);
                for (uint32_t i = 0; i < buff_tail_size; ++i)
                {
                    printf("val: %c, %x\n", data_buffer.at(i), data_buffer.at(i));
                }
            }
        }
    }
}

size_t Delta::ReadBlockFromOryginal(const std::string &in_oryginal_file_name, std::vector<char> &data_buffer, uint32_t block_number)
{
    size_t size = 0;
    std::ifstream fin(in_oryginal_file_name, std::ifstream::binary);

    for (uint32_t cnt = 0; cnt <= block_number; ++cnt)
    {
        size = 0;
        for (size_t i = 0; (i < m_block_size) && (!fin.eof()); ++i)
        {
            fin.read(data_buffer.data() + i, 1);
            if (fin.gcount())
            {
                ++size;
            }
        }
    }
    return size;
}

void Delta::WriteDataToRecovered(const std::vector<char> &data_buffer, size_t data_size, std::ofstream &fout_recovered)
{
    fout_recovered.write(data_buffer.data(), data_size);
}

void Delta::RebuildFromDelta(const std::string &in_oryginal_file_name, const std::string &out_recovered_file_name)
{
    std::ifstream fin(m_out_delta_file_name, std::ifstream::binary);
    std::ofstream fout_recovered(out_recovered_file_name, std::ofstream::binary);

    char delimiter;
    std::vector<char> data_buffer(m_block_size);

    while (!fin.eof())
    {
        fin.read(&delimiter, 1);
        if (fin.gcount())
        {
            if (delimiter == m_block_delimiter)
            {
                fin.read(data_buffer.data(), m_block_num_field_size);
                uint32_t block_number = *reinterpret_cast<uint32_t *>(data_buffer.data());
                //printf("block_number: %d\n", block_number);
                size_t block_size = ReadBlockFromOryginal(in_oryginal_file_name, data_buffer, block_number);
                /*for (uint32_t i = 0; i < block_size; ++i)
                {
                    printf("block val: %c, %x\n", data_buffer.at(i), data_buffer.at(i));
                }*/
                WriteDataToRecovered(data_buffer, block_size, fout_recovered);
            }
            else if (delimiter == m_data_delimiter)
            {
                fin.read(data_buffer.data(), m_data_num_field_size);
                uint32_t data_length = *reinterpret_cast<uint32_t *>(data_buffer.data());
                //printf("data_length: %d\n", data_length);

                uint32_t buffs_number = data_length / m_block_size;
                uint32_t buff_tail_size = data_length % m_block_size;
                while (buffs_number--)
                {
                    fin.read(data_buffer.data(), m_block_size);
                    /*for (const auto &a : data_buffer)
                    {
                        printf("val: %c, %x\n", a, a);
                    }*/
                    WriteDataToRecovered(data_buffer, m_block_size, fout_recovered);
                }
                fin.read(data_buffer.data(), buff_tail_size);
                /*for (uint32_t i = 0; i < buff_tail_size; ++i)
                {
                    printf("tail val: %c, %x\n", data_buffer.at(i), data_buffer.at(i));
                }*/
                WriteDataToRecovered(data_buffer, buff_tail_size, fout_recovered);
            }
        }
    }
}
